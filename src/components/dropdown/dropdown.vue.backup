<!--
 -
 -
 - @author: Storm
 - @date: 2018/11/02
 -->
<template>
  <div
    ref="dropdown"
    v-if="innerVal !== 0"
    v-show="innerVal === 1"
    :class="classes"
    class="s-dropdown"
    @click="handleClick">
    <slot />
  </div>
</template>

<script>
import elOnceEventListener from '../../utils/elOnceEventListener'
import ComponentDeparture from '../../utils/componentDeparture.js'

export default {
  name: 'SDropdown',
  props: {
    value: {
      type: Number,
      default: 1
    },

    left: {
      type: [String, Number],
      default: null
    },

    top: {
      type: [String, Number],
      default: null
    },

    // 是否脱离文档流
    departure: {
      type: Boolean,
      default: true
    },

    // 风格
    styles: {
      type: String,
      default: 'default',
      validator (val) {
        return ['default'].includes(val)
      }
    },

    // 是否有角标
    superscript: {
      type: Boolean,
      default: false
    },

    // 定位元素
    posElm: {
      type: Object,
      default: null
    },

    // 是否要自动关闭
    autoClose: {
      type: Boolean,
      default: true
    }
  },
  data () {
    return {
      innerVal: this.value
    }
  },
  computed: {
    classes () {
      return {
        [`s-dropdown-${this.styles}`]: !!this.styles,
        'is__departure': this.departure
      }
    }
  },
  watch: {
    value (val, oldVal) {
      if (val === oldVal) return
      this.innerVal = val
      if (val === 1) {
        if (this.departure) {
          this.departureInstance.show()
        } else {
          this.addListener()
        }
      } else if (val === 2) {
        if (this.departure) {
          this.departureInstance.hide()
        } else {
          this.removeListener()
        }
      }
    }
  },
  mounted () {

    // 脱离文档流
    if (this.departure) {
      this.departureInstance = new ComponentDeparture(this)
    } else {
      if (this.innerVal > 0) {
        this.addListener()
      }
    }
  },
  beforeDestroy () {
    this.removeListener()
  },
  methods: {

    // 加入监听
    addListener () {
      if (!this.isPosition) {
        this.$nextTick(() => {
          const { top, height } = this.$el.getBoundingClientRect()
          const clientHeight = document.documentElement.clientHeight
          if (top + height > clientHeight) {
            this.$el.style.top = `${clientHeight - top - height + 36}px`
          } else {
            this.$el.style.top = ''
          }
          this.isPosition = true
        })
      }
      if (this.innerVal === 1 && this.autoClose) {
        this.$nextTick()
          .then(() => {
            elOnceEventListener.add(this.docClickCb)
          }, () => {
          })
      }
    },

    // 移除监听
    removeListener () {
      elOnceEventListener.remove(this.docClickCb)
      // if (this.innerVal === 1 && this.autoClose) {
      //   console.log('remove......')
      //   elOnceEventListener.remove(this.docClickCb)
      // }
    },

    // document点击回调
    docClickCb () {
      this.innerVal = 2
      this.$emit('input', 2)
    },

    // 点击事件
    handleClick ($event) {
      if (this.autoClose) {
        $event.stopPropagation()
      }
      this.$emit('click')
    }
  }
}
</script>

<style lang="scss">
  .s-dropdown {
    position: absolute;
    z-index: 1;
    left: auto;
    top: auto;
    margin-top: 5px;

    &.is__departure {
    }

    &-default {
      background: #fff;
      box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.30);
      border-radius: 3px;
    }
  }
</style>
